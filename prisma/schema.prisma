generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(uuid())
  name           String?
  email          String            @unique
  passwordHash   String?
  avatarUrl      String?
  loginMethod    LoginMethod       @default(LOCAL)
  providerId     String?
  refreshToken   String?
  role           Role              @default(USER)
  status         UserStatus        @default(ACTIVE)
  points         Int               @default(0)
  referralCode   String?           @unique
  referredBy     String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  analytics      CornerAnalytics[]
  pointLogs      PointLog[]
  posts          Post[]
  redeemLogs     RedeemLog[]
  redeemRequests RedeemRequest[]
  userLimits     UserLimit[]
  userActions    UserPostAction[]
  referrer       User?             @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals      User[]            @relation("UserReferrals")
  wishes         Wish[]

  @@map("users")
}

model Post {
  id            String           @id @default(uuid())
  userId        String
  type          PostType
  caption       String?
  url           String?
  likeCount     Int              @default(0)
  shareCount    Int              @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  isHighlighted Boolean          @default(false)
  commentCount  Int              @default(0)
  user          User             @relation(fields: [userId], references: [id])
  actions       UserPostAction[]

  @@map("posts")
}

model UserPostAction {
  id        String     @id @default(uuid())
  userId    String
  postId    String
  type      ActionType
  createdAt DateTime   @default(now())
  post      Post       @relation(fields: [postId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@unique([userId, postId, type])
  @@map("user_post_actions")
}

model PointLog {
  id          String   @id @default(uuid())
  userId      String
  points      Int
  reason      String
  referralUrl String?
  note        String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@map("point_logs")
}

model UserLimit {
  id        String    @id @default(uuid())
  userId    String
  limitType LimitType
  period    DateTime
  count     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, limitType, period])
  @@map("user_limits")
}

model RedeemLog {
  id           String       @id @default(uuid())
  userId       String
  giftCode     String
  costPoints   Int
  costLife     Int?
  status       RedeemStatus @default(PENDING)
  receiverInfo Json
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id])

  @@map("redeem_logs")
}

model CornerAnalytics {
  id        String   @id @default(uuid())
  userId    String
  corner    Int
  duration  Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("corner_analytics")
}

model Reward {
  id             String          @id @default(uuid())
  name           String
  description    String
  pointsRequired Int
  lifeRequired   Int?
  imageUrl       String?
  isActive       Boolean         @default(true)
  maxPerUser     Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  redeemRequests RedeemRequest[]

  @@map("rewards")
}

model Wish {
  id            String   @id @default(uuid())
  userId        String
  content       String
  isHighlighted Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])

  @@map("wishes")
}

model RedeemRequest {
  id              String       @id @default(uuid())
  userId          String
  rewardId        String
  receiverName    String
  receiverPhone   String
  receiverAddress String
  status          RedeemStatus @default(PENDING)
  pointsUsed      Int
  rejectionReason String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  reward          Reward       @relation(fields: [rewardId], references: [id])
  user            User         @relation(fields: [userId], references: [id])

  @@map("redeem_requests")
}


enum LimitType {
  REFERRAL_WEEKLY
  POST_WEEKLY
  WISH_WEEKLY
  SHARE_DAILY
}

enum LoginMethod {
  LOCAL
  GOOGLE
  FACEBOOK
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum PostType {
  EMOJI_CARD
  IMAGE
  CONFESSION
  CLIP
}

enum ActionType {
  LIKE
  SHARE
}

enum RedeemStatus {
  PENDING
  APPROVED
  REJECTED
  DELIVERED
}
